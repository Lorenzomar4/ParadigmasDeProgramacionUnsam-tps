{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from operator import xor\n",
    "from os import O_TRUNC\n",
    "import pandas as pd \n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt \n",
    "import seaborn as seabornInstance\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn import metrics\n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "from scipy import stats\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "\n",
    "\n",
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from statistics import mean\n",
    "\n",
    "import prediccion\n",
    "import algoritmos\n",
    "\n",
    "df = pd.read_csv('diamonds.csv')\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Informacion de los Datos <br>\n",
    "Descripción\n",
    "Conjunto de datos que contiene los precios y otros atributos de casi 54.000 diamantes. Las variables son las siguientes:\n",
    "\n",
    "Formato\n",
    "Un dataframe con 53940 filas y 10 variables:\n",
    "\n",
    "Price (precio)\n",
    "precio en dólares estadounidenses (\\$326-\\$18.823)\n",
    "\n",
    "Carat (quilate)\n",
    "peso del diamante (0,2-5,01)\n",
    "\n",
    "Cut (talla)\n",
    "calidad de la talla (Fair/regular, Good/buena, Very Good/muy buena, Premium/superior, Ideal)\n",
    "\n",
    "color\n",
    "color del diamante, de D (mejor) a J (peor)\n",
    "\n",
    "Clarity (claridad)\n",
    "medida de la claridad del diamante (I1 (peor), SI2, SI1, VS2, VS1, VVS2, VVS1, IF (mejor))\n",
    "\n",
    "x\n",
    "longitud en mm (0-10,74)\n",
    "\n",
    "y\n",
    "anchura en mm (0-58,9)\n",
    "\n",
    "z\n",
    "profundidad en mm (0-31,8)\n",
    "\n",
    "Depth (profundidad)\n",
    "porcentaje de profundidad total = z / media(x, y) = 2 * z / (x + y) (43-79)\n",
    "\n",
    "Table (tabla)\n",
    "anchura de la parte superior del diamante en relación con el punto más ancho (43-95)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Detalles estadísticos del conjunto de datos: ( Recopilación de datos)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.5</td>\n",
       "      <td>55.0</td>\n",
       "      <td>326</td>\n",
       "      <td>3.95</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.21</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI1</td>\n",
       "      <td>59.8</td>\n",
       "      <td>61.0</td>\n",
       "      <td>326</td>\n",
       "      <td>3.89</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Good</td>\n",
       "      <td>E</td>\n",
       "      <td>VS1</td>\n",
       "      <td>56.9</td>\n",
       "      <td>65.0</td>\n",
       "      <td>327</td>\n",
       "      <td>4.05</td>\n",
       "      <td>4.07</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.29</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.4</td>\n",
       "      <td>58.0</td>\n",
       "      <td>334</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.23</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.31</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.3</td>\n",
       "      <td>58.0</td>\n",
       "      <td>335</td>\n",
       "      <td>4.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53935</th>\n",
       "      <td>0.72</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>60.8</td>\n",
       "      <td>57.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.75</td>\n",
       "      <td>5.76</td>\n",
       "      <td>3.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53936</th>\n",
       "      <td>0.72</td>\n",
       "      <td>Good</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>63.1</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.69</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53937</th>\n",
       "      <td>0.70</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>62.8</td>\n",
       "      <td>60.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.66</td>\n",
       "      <td>5.68</td>\n",
       "      <td>3.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53938</th>\n",
       "      <td>0.86</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>6.15</td>\n",
       "      <td>6.12</td>\n",
       "      <td>3.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53939</th>\n",
       "      <td>0.75</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>D</td>\n",
       "      <td>SI2</td>\n",
       "      <td>62.2</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.83</td>\n",
       "      <td>5.87</td>\n",
       "      <td>3.64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>53940 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat        cut color clarity  depth  table  price     x     y     z\n",
       "0       0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
       "1       0.21    Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
       "2       0.23       Good     E     VS1   56.9   65.0    327  4.05  4.07  2.31\n",
       "3       0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
       "4       0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75\n",
       "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
       "53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
       "53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
       "53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
       "53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
       "53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
       "\n",
       "[53940 rows x 10 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "      <td>53940.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.797940</td>\n",
       "      <td>61.749405</td>\n",
       "      <td>57.457184</td>\n",
       "      <td>3932.799722</td>\n",
       "      <td>5.731157</td>\n",
       "      <td>5.734526</td>\n",
       "      <td>3.538734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.474011</td>\n",
       "      <td>1.432621</td>\n",
       "      <td>2.234491</td>\n",
       "      <td>3989.439738</td>\n",
       "      <td>1.121761</td>\n",
       "      <td>1.142135</td>\n",
       "      <td>0.705699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.200000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>43.000000</td>\n",
       "      <td>326.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.400000</td>\n",
       "      <td>61.000000</td>\n",
       "      <td>56.000000</td>\n",
       "      <td>950.000000</td>\n",
       "      <td>4.710000</td>\n",
       "      <td>4.720000</td>\n",
       "      <td>2.910000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.700000</td>\n",
       "      <td>61.800000</td>\n",
       "      <td>57.000000</td>\n",
       "      <td>2401.000000</td>\n",
       "      <td>5.700000</td>\n",
       "      <td>5.710000</td>\n",
       "      <td>3.530000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.040000</td>\n",
       "      <td>62.500000</td>\n",
       "      <td>59.000000</td>\n",
       "      <td>5324.250000</td>\n",
       "      <td>6.540000</td>\n",
       "      <td>6.540000</td>\n",
       "      <td>4.040000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.010000</td>\n",
       "      <td>79.000000</td>\n",
       "      <td>95.000000</td>\n",
       "      <td>18823.000000</td>\n",
       "      <td>10.740000</td>\n",
       "      <td>58.900000</td>\n",
       "      <td>31.800000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              carat         depth         table         price             x  \\\n",
       "count  53940.000000  53940.000000  53940.000000  53940.000000  53940.000000   \n",
       "mean       0.797940     61.749405     57.457184   3932.799722      5.731157   \n",
       "std        0.474011      1.432621      2.234491   3989.439738      1.121761   \n",
       "min        0.200000     43.000000     43.000000    326.000000      0.000000   \n",
       "25%        0.400000     61.000000     56.000000    950.000000      4.710000   \n",
       "50%        0.700000     61.800000     57.000000   2401.000000      5.700000   \n",
       "75%        1.040000     62.500000     59.000000   5324.250000      6.540000   \n",
       "max        5.010000     79.000000     95.000000  18823.000000     10.740000   \n",
       "\n",
       "                  y             z  \n",
       "count  53940.000000  53940.000000  \n",
       "mean       5.734526      3.538734  \n",
       "std        1.142135      0.705699  \n",
       "min        0.000000      0.000000  \n",
       "25%        4.720000      2.910000  \n",
       "50%        5.710000      3.530000  \n",
       "75%        6.540000      4.040000  \n",
       "max       58.900000     31.800000  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 53940 entries, 0 to 53939\n",
      "Data columns (total 10 columns):\n",
      " #   Column   Non-Null Count  Dtype  \n",
      "---  ------   --------------  -----  \n",
      " 0   carat    53940 non-null  float64\n",
      " 1   cut      53940 non-null  object \n",
      " 2   color    53940 non-null  object \n",
      " 3   clarity  53940 non-null  object \n",
      " 4   depth    53940 non-null  float64\n",
      " 5   table    53940 non-null  float64\n",
      " 6   price    53940 non-null  int64  \n",
      " 7   x        53940 non-null  float64\n",
      " 8   y        53940 non-null  float64\n",
      " 9   z        53940 non-null  float64\n",
      "dtypes: float64(6), int64(1), object(3)\n",
      "memory usage: 4.1+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Vemos que ninguna columna por suerte tiene datos nulos"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Limpieza de datos"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Comprobar valores faltantes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "carat      False\n",
       "cut        False\n",
       "color      False\n",
       "clarity    False\n",
       "depth      False\n",
       "table      False\n",
       "price      False\n",
       "x          False\n",
       "y          False\n",
       "z          False\n",
       "dtype: bool"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Revisemos si existe campos iguales a 0 en algunas columnas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "x     8\n",
       "y     7\n",
       "z    20\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = df[df == 0].count(axis=0)\n",
    "cols[cols > 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2207</th>\n",
       "      <td>1.00</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>SI2</td>\n",
       "      <td>59.1</td>\n",
       "      <td>59.0</td>\n",
       "      <td>3142</td>\n",
       "      <td>6.55</td>\n",
       "      <td>6.48</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2314</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>I1</td>\n",
       "      <td>58.1</td>\n",
       "      <td>59.0</td>\n",
       "      <td>3167</td>\n",
       "      <td>6.66</td>\n",
       "      <td>6.60</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4791</th>\n",
       "      <td>1.10</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.0</td>\n",
       "      <td>59.0</td>\n",
       "      <td>3696</td>\n",
       "      <td>6.50</td>\n",
       "      <td>6.47</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5471</th>\n",
       "      <td>1.01</td>\n",
       "      <td>Premium</td>\n",
       "      <td>F</td>\n",
       "      <td>SI2</td>\n",
       "      <td>59.2</td>\n",
       "      <td>58.0</td>\n",
       "      <td>3837</td>\n",
       "      <td>6.50</td>\n",
       "      <td>6.47</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10167</th>\n",
       "      <td>1.50</td>\n",
       "      <td>Good</td>\n",
       "      <td>G</td>\n",
       "      <td>I1</td>\n",
       "      <td>64.0</td>\n",
       "      <td>61.0</td>\n",
       "      <td>4731</td>\n",
       "      <td>7.15</td>\n",
       "      <td>7.04</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11182</th>\n",
       "      <td>1.07</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>F</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.6</td>\n",
       "      <td>56.0</td>\n",
       "      <td>4954</td>\n",
       "      <td>0.00</td>\n",
       "      <td>6.62</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11963</th>\n",
       "      <td>1.00</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>H</td>\n",
       "      <td>VS2</td>\n",
       "      <td>63.3</td>\n",
       "      <td>53.0</td>\n",
       "      <td>5139</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13601</th>\n",
       "      <td>1.15</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>G</td>\n",
       "      <td>VS2</td>\n",
       "      <td>59.2</td>\n",
       "      <td>56.0</td>\n",
       "      <td>5564</td>\n",
       "      <td>6.88</td>\n",
       "      <td>6.83</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15951</th>\n",
       "      <td>1.14</td>\n",
       "      <td>Fair</td>\n",
       "      <td>G</td>\n",
       "      <td>VS1</td>\n",
       "      <td>57.5</td>\n",
       "      <td>67.0</td>\n",
       "      <td>6381</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24394</th>\n",
       "      <td>2.18</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>SI2</td>\n",
       "      <td>59.4</td>\n",
       "      <td>61.0</td>\n",
       "      <td>12631</td>\n",
       "      <td>8.49</td>\n",
       "      <td>8.45</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24520</th>\n",
       "      <td>1.56</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>G</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.2</td>\n",
       "      <td>54.0</td>\n",
       "      <td>12800</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26123</th>\n",
       "      <td>2.25</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>SI1</td>\n",
       "      <td>61.3</td>\n",
       "      <td>58.0</td>\n",
       "      <td>15397</td>\n",
       "      <td>8.52</td>\n",
       "      <td>8.42</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26243</th>\n",
       "      <td>1.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>D</td>\n",
       "      <td>VVS1</td>\n",
       "      <td>62.1</td>\n",
       "      <td>59.0</td>\n",
       "      <td>15686</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27112</th>\n",
       "      <td>2.20</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>SI1</td>\n",
       "      <td>61.2</td>\n",
       "      <td>59.0</td>\n",
       "      <td>17265</td>\n",
       "      <td>8.42</td>\n",
       "      <td>8.37</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27429</th>\n",
       "      <td>2.25</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>SI2</td>\n",
       "      <td>62.8</td>\n",
       "      <td>59.0</td>\n",
       "      <td>18034</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27503</th>\n",
       "      <td>2.02</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.7</td>\n",
       "      <td>53.0</td>\n",
       "      <td>18207</td>\n",
       "      <td>8.02</td>\n",
       "      <td>7.95</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27739</th>\n",
       "      <td>2.80</td>\n",
       "      <td>Good</td>\n",
       "      <td>G</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.8</td>\n",
       "      <td>58.0</td>\n",
       "      <td>18788</td>\n",
       "      <td>8.90</td>\n",
       "      <td>8.85</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49556</th>\n",
       "      <td>0.71</td>\n",
       "      <td>Good</td>\n",
       "      <td>F</td>\n",
       "      <td>SI2</td>\n",
       "      <td>64.1</td>\n",
       "      <td>60.0</td>\n",
       "      <td>2130</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49557</th>\n",
       "      <td>0.71</td>\n",
       "      <td>Good</td>\n",
       "      <td>F</td>\n",
       "      <td>SI2</td>\n",
       "      <td>64.1</td>\n",
       "      <td>60.0</td>\n",
       "      <td>2130</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.00</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51506</th>\n",
       "      <td>1.12</td>\n",
       "      <td>Premium</td>\n",
       "      <td>G</td>\n",
       "      <td>I1</td>\n",
       "      <td>60.4</td>\n",
       "      <td>59.0</td>\n",
       "      <td>2383</td>\n",
       "      <td>6.71</td>\n",
       "      <td>6.67</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat        cut color clarity  depth  table  price     x     y    z\n",
       "2207    1.00    Premium     G     SI2   59.1   59.0   3142  6.55  6.48  0.0\n",
       "2314    1.01    Premium     H      I1   58.1   59.0   3167  6.66  6.60  0.0\n",
       "4791    1.10    Premium     G     SI2   63.0   59.0   3696  6.50  6.47  0.0\n",
       "5471    1.01    Premium     F     SI2   59.2   58.0   3837  6.50  6.47  0.0\n",
       "10167   1.50       Good     G      I1   64.0   61.0   4731  7.15  7.04  0.0\n",
       "11182   1.07      Ideal     F     SI2   61.6   56.0   4954  0.00  6.62  0.0\n",
       "11963   1.00  Very Good     H     VS2   63.3   53.0   5139  0.00  0.00  0.0\n",
       "13601   1.15      Ideal     G     VS2   59.2   56.0   5564  6.88  6.83  0.0\n",
       "15951   1.14       Fair     G     VS1   57.5   67.0   6381  0.00  0.00  0.0\n",
       "24394   2.18    Premium     H     SI2   59.4   61.0  12631  8.49  8.45  0.0\n",
       "24520   1.56      Ideal     G     VS2   62.2   54.0  12800  0.00  0.00  0.0\n",
       "26123   2.25    Premium     I     SI1   61.3   58.0  15397  8.52  8.42  0.0\n",
       "26243   1.20    Premium     D    VVS1   62.1   59.0  15686  0.00  0.00  0.0\n",
       "27112   2.20    Premium     H     SI1   61.2   59.0  17265  8.42  8.37  0.0\n",
       "27429   2.25    Premium     H     SI2   62.8   59.0  18034  0.00  0.00  0.0\n",
       "27503   2.02    Premium     H     VS2   62.7   53.0  18207  8.02  7.95  0.0\n",
       "27739   2.80       Good     G     SI2   63.8   58.0  18788  8.90  8.85  0.0\n",
       "49556   0.71       Good     F     SI2   64.1   60.0   2130  0.00  0.00  0.0\n",
       "49557   0.71       Good     F     SI2   64.1   60.0   2130  0.00  0.00  0.0\n",
       "51506   1.12    Premium     G      I1   60.4   59.0   2383  6.71  6.67  0.0"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[(df['x'] == 0) | (df['y'] == 0) | (df['z'] == 0) ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "carat       0\n",
       "cut         0\n",
       "color       0\n",
       "clarity     0\n",
       "depth       0\n",
       "table       0\n",
       "price       0\n",
       "x           8\n",
       "y           7\n",
       "z          20\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace(0, np.nan, inplace=True)\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "carat      0\n",
       "cut        0\n",
       "color      0\n",
       "clarity    0\n",
       "depth      0\n",
       "table      0\n",
       "price      0\n",
       "x          0\n",
       "y          0\n",
       "z          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.replace(0, np.nan, inplace=True)\n",
    "mean = df['x'].mean() # imputando x con media\n",
    "df['x'].fillna(mean, inplace =True)\n",
    "mode = df['y'].mode() \n",
    "df['y'].fillna(mean, inplace =True)\n",
    "mode = df['z'].mode() \n",
    "df['z'].fillna(mean, inplace =True)\n",
    "\n",
    "\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Series([], dtype: int64)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = df[df == 0].count(axis=0)\n",
    "cols[cols > 0]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Sin embargo aplicar alguna estrategia para que ya no sean 0 no es buena idea porque se trata de vectores asi que los dejamos asi"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Analisis de datos <br>\n",
    "Comencemos por el rango"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El rango es: 18497\n"
     ]
    }
   ],
   "source": [
    "print(f'El rango es: {df[\"price\"].max() - df[\"price\"].min()}')"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Medidas de asimetría"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Outliers"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Obtenemos primero las columnas numericas "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['carat', 'depth', 'table', 'x', 'y', 'z']"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "columnas_numericas = df.select_dtypes(include=['int', 'float']).columns.tolist()\n",
    "columnas_numericas.remove('price')\n",
    "columnas_numericas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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+tM3WvDeHdq+fTuBHwAAE/E58Pfp00fffPPNQUtwfvzxxxo4cKC/6gLCxv79+5WamqrU1CPVp3tq0K7br3aA1CNol5Mlvkapqanav39/8C4KAAACzufAf+211+qWW27Rs88+K4vFos2bN2vFihW64447ZLVaD/8CQISprq7WtGnTJH2tXfo61OUETGIXadq0aaqurg51KQAAwI98DvzTp09XfX29srKyVFNTozPOOEPx8fG64447dNNNNwWiRiCkOnfurKeeekpX/vJB9el+dKjLCZitP23Qgvdu1znnnBPqUgAAgB/5HPgtFotmzpypO++8U998842qq6t17LHHqnPnzoGoDwi5mJgYbdmyRUZtkmIOdA91OQFj1G7Rli1bFBMTvFWBAABA4LX5f/a4uDgde+yx/qwFAAAAgJ/5HPh//vln3XfffSoqKtIPP/yg+vr6Jo9v3LjRb8UB4WTrT98E7Vp1cbXaceT/qcfmvordF7xVegAAgPn4HPivueYalZSU6Le//a1SU1NlsVgCURcQNnr27KnExCQteO+O4F10uKTnJI1Q0Nfh79mzZ/AuCAAAAs7nwP/uu+9q8eLFGjt2rF8K+P7773X33Xfr3XffVU1NjY455hg999xzOvnkkyU5t6DPy8vT/PnzVVlZqbFjx+qJJ57QoEGD/HJ94HD69eunsrK1Qd1p98u4LzVVU/XCghc0bN+woF2XnXYBADAfnwN/t27d1L27fyYu7ty5U2PHjtVZZ52ld999V0cccYTWr1+vbt26uc954IEHNHfuXL3wwgtKT0+X1WrV2Wefrf/9739KSEjwSx3A4fTr1y+oQXh/nXMt/IwhGRoROyJo1wUAAObjc+B3OByy2Wx64YUXlJSU1K6L33///UpLS9Nzzz3nPpaenu7+2jAMzZkzR7m5ubrgggskSQsWLFDv3r21aNEiXXrppe26PgAAAGB2Pgf+Bx98UBs2bFDv3r01YMAAxcbGNnl89erVXr/Wm2++qbPPPlu//vWvVVJSoqOOOkrXX3+9rr32WklSeXm5tm7dquzsbPdzkpOTdeqpp2rFihUtBv7a2lrV1ta671dVVUmS6urqVFdX59N7jSSu92bm9xhN6vbXSbHO2zrRpmZAm5oLP3PNxeFwaNasWcrNzWUTUROIlu9PX96fz4H/wgsv9PUph7Rx40Y98cQTysnJ0Z/+9CetWrVKN998s+Li4jR16lRt3bpVktS7d+8mz+vdu7f7sebuvfde2e32g44vWbKk3b+RiARLly4NdQnwA9f32ek6XYsWLQppLfCPDckbpHHSypUrtX1X8OaDILD4mRv5Xn75Zb300kvKljP4f/PNN7rkkktCXRb8wOzfnzU1NV6fazEMwwhgLa2Ki4vTySefrOXLl7uP3XzzzVq1apVWrFih5cuXa+zYsdq8ebNSU1Pd51x88cWyWCx6+eWXD3rNlnr409LStH37dnXt2jWwbyiE6urqtHTpUo0fP/6g37ogssTFxR10bN++fSGoBP706f5PdXri6fp4z8caFTMq1OWgnfiZaw4FBQWy2+1ySMqVNEuSVVJeXp5mzpwZ2uLQZtHy/VlVVaWePXtq165dh824bd54q7S0VGvXrpUkHXfccRo+fLjPr5GamnrQ5l1Dhw7Va6+9Jknq06ePJGnbtm1NAv+2bdt00kkntfia8fHxio8/eN3y2NhYUze6S7S8T7M61DK3cXFxCuFnc/hBrJzfl7ExfI+aCT9zI5fD4WgS9uVxa7Xb1bFjR4b3RDizf3/68t58Dvw//PCDLr30Ui1btkwpKSmSpMrKSp111llauHChjjjiCK9fa+zYsVq3bl2TY19//bX69+8vyTmBt0+fPioqKnIH/KqqKq1cuVLXXXedr6UDYe1we1pYLBZCPwD4gWsBEs+w7+IO/Tab85bQDxPwOfDfdNNN2r17t7766isNHTpUkvS///1PU6dO1c0336yXXnrJ69e67bbbNGbMGM2ePVsXX3yxPv30Uz399NN6+umnJTkDzq233qpZs2Zp0KBB7mU5jzzySL/OJQBCzdsN7Aj9/lFRURHUfRUkqSyuTBomla0rU8y+Nv9y1WfsrQA01VrYdyH0w2x8HsOfnJyswsJCnXLKKU2Of/rpp5owYYIqKyt9KuDtt9/WjBkztH79eqWnpysnJ8e9So/UuPHW008/rcrKSp1++ul6/PHHNXjwYK9ev6qqSsnJyV6Nb4pkdXV1eueddzRx4kRT//oq0tTU1KisrKzVc0aOHNni8WxJhYd4Tmlp6WGvnZGRERUT1X1VUVGhoUOHqKZmb3AvPFzSagV99+SkpAStXbuO0O9n/MyNXB06dFCWYcib6ZzjJRVZLKqvrw90WfCjaPn+9CXj+tzNVF9f3+JfXmxsbJu+ISZNmqRJkyYd8nGLxaL8/Hzl5+f7/NpAqJWVlR0y0Lem+QSy5rx5zdLSUo0YwaZdzW3fvl01NXv19wekoQODd909HaVvi6QBNinxQHCuuXajdMVde7V9+3YCP9DAbrfLZrNplg7dwy85f/4WSspvYeU/INL4HPgzMzN1yy236KWXXtKRRx4pSfr+++912223KSsry+8FApEsIyPjsL3xzcN7ixPImj3H2x5+HNrQgdKI44J7zbHBvRyAFriG57iG67QU+l2dLfn5+QzngSn4HPgfe+wxnX/++RowYIDS0tIkSZs2bdKwYcP097//3e8FApEsKSnJp172VieQeRyj5x4A2q610E/Yhxn5HPjT0tK0evVqFRYWuscmDx06tMluuAB859UEsiDVAgBm11LoJ+zDrNq0VITFYtH48eM1fvx4f9cDRKVstT6WVA2Pl+jQE3kBAL7xDP2un6+EfZiRV4F/7ty5+sMf/qCEhATNnTu31XNvvvlmvxQGRJNCyesJZAAA/7FarTpw4IDy8/OVZ7MR9mFKXgX+hx9+WJdffrkSEhL08MMPH/I8i8VC4AfayPVfTGsTyAAA/jdz5kwNHz5cEydODHUpQEB4FfjLy8tb/BqAf7UU+gn7AACgPYK33SOAQ8qWtEFSuZqGfs+wny7paDGsp73279+v1NRUVe6RtvwU6moCq3KPlJrqfM8AgOjlc+CfMmWKRo0apbvvvrvJ8QceeECrVq3SK6+84rfigGhRKOcqPc+qMfR7TtBNl/R70dPvD9XV1Zo2bZo+2iB9tCHU1QTetGnO9wwAiF4+B/4PP/xQ99xzz0HHzznnHD344IP+qAmISlY1Df2E/cDo3LmznnrqqaDvtBsKzp12nT+fAQDRy+fAX11drbi4uIOOx8bGqqqqyi9FAdHKKilTzsDvki7Cvj/FxMRoy5YtSkmUUruHuprA2rLF+ScmhtGbABDNOvj6hOOPP14vv/zyQccXLlyoY4891i9FAdEmW1J+w9fFHsc87+d7HAMAAPCWz90+VqtVF110kTZs2KDMzExJUlFRkV566SXG7wNtVCip3uO+a9ddz0m7y9QY/tF+azcG93p7OkrfdpEG7JYSDwTnmsF+jwCA8ORz4D/vvPO0aNEizZ49W6+++qoSExN1wgknqLCwUGeeeWYgagSigivMu8K+PG6tIuz7S8+ePZWUlKAr7tob3AsPl7Ra0ghJnwfvsklJCerZs2fwLggACDttGth57rnn6txzz/V3LUDU8wz7Lp6hH+3Xr18/rV27Ttu3bw/qdb+M+1JTNVUvLHhBw/YNC9p1e/bsqX79+gXtegCA8MNMLiBMtBT2XQj9/tWvX7+gh+D9dc618DOGZGhE7IigXhsAEN18nrR74MAB/eUvf9GoUaPUp08fde/evckfAL7L1qHDvkuumLQLAAB853Pgt9vteuihh3TJJZdo165dysnJ0UUXXaQOHTq0uD4/gMMrlHOCbmtmiV12AQCA73wO/P/4xz80f/583X777YqJidFvfvMbPfPMM7LZbPrkk08CUSMQFaw6dOj3XK0HAADAFz4H/q1bt+r444+X5NyxcteuXZKkSZMmafHixf6tDogimWo59LvCfmbQKwIAAGbgc+Dv27evtmzZIkk6+uijtWTJEknSqlWrFB8f79/qgCiRLalIzs21PEO/K+znNzzOGH4AAOArn1fpmTx5soqKinTqqafqpptu0hVXXKG//vWvqqio0G233RaIGgHTc43hdw3bsUoqaTju+SGAMfwAAMBXPgf+++67z/31JZdcov79+2v58uUaNGiQzjvvPL8WB0SLgWoa9iUpT03DvrXhPDZPBQAAvvA58O/du1cJCQnu+6eddppOO+00vxYFRJuNahzDr4Zb19eeY/jZbRcAAPjK5zH8vXr10tSpU7V06VLV19cHoiYg6nRTY5hvaQy/Gh7vFuS6AABA5PM58L/wwguqqanRBRdcoKOOOkq33nqrPvvss0DUBkSNnQ23DjUO4xmvxgm7jmbnAQAAeMvnwD958mS98sor2rZtm2bPnq3//e9/Ou200zR48GDl5+cHokbA1NLT0yU5Q32umq7K4wr/uWoM/a7zAQAAvOFz4Hfp0qWLfve732nJkiX673//q06dOslut/uzNiAqlJeXK1vOUO9ilVSvpptt5cq5LGd5eXkQqwMAAJGuzYF/7969+uc//6kLL7xQI0aM0E8//aQ777zTn7UBUcO1LGdrWJYTAAC0hc+r9Lz//vt68cUXtWjRIsXExOhXv/qVlixZojPOOCMQ9QFRw9Wbn9vCY56TdwEAAHzRpo23zjvvPC1YsEATJ05UbGxsIOoCooZFUpaaDuHxDP2ey3J2kHNsPwAAgLd8Cvz79+/X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jUmTJrl/3kazmND9bgGe1q5dq9raWmVlZbX4+Msvv6y5c+dqw4YNqq6u1v79+9W1a9cm5/Tv319HHHFEk2Pr16+XzWbTypUrtX37dtXX10uSKioqNGzYsMC8mSi2YcMG7du3T6eeeqr7WPfu3TVkyBBJ0po1a3TgwAENHjy4yfNqa2vVo0cP9/2YmBidcsop7vsZGRlKSUnR2rVrNWrUqFZrOOGEE9xfd+rUSV27dtUPP/zQrveFls2bN0/PPvusKioqtGfPHu3bt++gydQnnniikpKS3PdHjx6t6upqbdq0Sf37929yrrf/PhBaf/nLXzRs2DC98sorKi0tVXx8fKhLQhtde+21OuWUU/T999/rqKOO0vPPP6+rrrpKFosl1KWhnX7/+99r9+7dWrp0qTp0YAQ7gT9MJCYmHvKxFStW6PLLL5fdbtfZZ5+t5ORkLVy48KCx4Z06dTroueedd5769++v+fPn68gjj1R9fb2GDRvGpN4Qqa6uVseOHVVaWqqOHTs2eaxz585+uUZsbGyT+xaLxf1BD/6zcOFC3XHHHXrwwQc1evRodenSRX/+85+1cuXKNr9mMP59oP02bNigzZs3q76+Xt9++62OP/74UJeENho+fLhOPPFELViwQBMmTNBXX32lxYsXh7ostNOsWbP0/vvv69NPP1WXLl1CXU5YIPCHiUGDBikxMVFFRUW65pprmjy2fPly9e/fXzNnznQf++677w77mjt27NC6des0f/58/eIXv5Akffzxx03OiYuLkyQdOHCgvW8Bko4++mjFxsZq5cqV6tevnyRp586d+vrrr3XmmWdq+PDhOnDggH744Qd3m7Rk//79+uyzz9y9+evWrVNlZaWGDh0qydlutFlwNf87//e//60xY8bo+uuvdx/znBDv8sUXX2jPnj3uD/WffPKJOnfurLS0tIPO9fbfB0Jn3759uuKKK3TJJZdoyJAhuuaaa7RmzRr16tUr1KWhja655hrNmTNH33//vbKzs1v83kTkeO2115Sfn693331XRx99dKjLCRsE/jCRkJCgu+++W3fddZfi4uI0duxY/fjjj/rqq680aNAgVVRUaOHChTrllFO0ePFivfHGG4d9zW7duqlHjx56+umnlZqaqoqKCk2fPr3JOb169VJiYqLee+899e3bVwkJCUpOTg7U2zS9zp076+qrr9add96pHj16qFevXpo5c6b714mDBw/W5ZdfriuvvFIPPvighg8frh9//FFFRUU64YQTdO6550py9tLfdNNNmjt3rmJiYnTjjTfqtNNOc38AGDBggMrLy/Wf//xHffv2VZcuXRhWEGADBgzQypUr9e2336pz584aNGiQFixYoPfff1/p6en629/+plWrVrlXvnLZt2+frr76auXm5urbb79VXl6ebrzxxhZ/xeztvw+EzsyZM7Vr1y7NnTtXnTt31jvvvKPf//73evvtt0NdGtrosssu0x133KH58+drwYIFoS4H7fDll1/qyiuv1N13363jjjtOW7duleTssOnevXuIqwuxUE8iQKMDBw4Ys2bNMvr372/ExsYa/fr1M2bPnm0YhmHceeedRo8ePdwrfjz88MNGcnKy+7mHmsS5dOlSY+jQoUZ8fLxxwgknGMuWLTMkGW+88Yb7nPnz5xtpaWlGhw4djDPPPDOwbzIK7N6927jiiiuMpKQko3fv3sYDDzzQZGLmvn37DJvNZgwYMMCIjY01UlNTjcmTJxv//e9/DcNwTtpNTk42XnvtNWPgwIFGfHy8kZ2dbXz33Xfua+zdu9eYMmWKkZKSYkgynnvuOcMwjIPa1jAMIzk52f042m7dunXGaaedZiQmJhqSjLKyMuOqq64ykpOTjZSUFOO6664zpk+f3uT7cOrUqcYFF1xg2Gw29/fvtdde22SSZ/PJwIf794HQ+eCDD4yYmBjjo48+ch8rLy83unbtajz++OMhrAzt9dvf/tbo3r07E7AjnGvRi+Z/yDaGYTEMwwjZpw0AB3n++ed16623qrKyMtSlAEBUyMrK0nHHHae5c+eGuhQgIBjSAwAAotLOnTu1bNkyLVu2TI8//nioywEChsAPAACi0vDhw7Vz507df//97uWTATNiSA8AAABgYuxEAAAAAJgYgR8AAAAwMQI/AAAAYGIEfgAAAMDECPwAAACAiRH4AQAAABMj8AMAAAAmRuAHAAAATOz/AWY2aYI1XJtiAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 900x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "dataframe = df.loc[:, ['carat', 'depth', 'table', 'x', 'y', 'z']]\n",
    "# Primer acercamiento a la detección de outliers mediante boxplot utilizando todas las columnas numéricas...\n",
    "fig, ax1 = plt.subplots(nrows=1, ncols=1, figsize=(9, 7))\n",
    "labels = ['carat', 'depth', 'table', 'x', 'y', 'z']\n",
    "red_diamond = dict(markerfacecolor='r', marker='D')\n",
    "bplot = ax1.boxplot(dataframe.select_dtypes(include=[\"int16\", \"int32\", \"int64\", \"float16\", \"float32\", \"float64\"]),\n",
    "                    vert=True,\n",
    "                    patch_artist=True,\n",
    "                    labels=labels,\n",
    "                    capprops=dict(color=\"black\"),\n",
    "                    medianprops=dict(color=\"grey\"),\n",
    "                    whiskerprops=dict(color=\"lime\"),\n",
    "                    flierprops=red_diamond)\n",
    "colors = ['lightcoral', 'mediumpurple', 'gold','aquamarine']\n",
    "for patch, color in zip(bplot['boxes'], colors):\n",
    " patch.set_facecolor(color)\n",
    "for ax in [ax1]:\n",
    " ax.yaxis.grid(True)\n",
    " ax.xaxis.grid(True)\n",
    " ax.set_ylabel('Valores de observaciones')\n",
    "plt.show() "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "los rombos rojos representan los valores atípicos (outliers) en los datos. A simple vista pareciera que por cada columna contamos con varios valores atipicos no? Vamos a seguir con en analisis uno por uno para determinar que hacer con ellos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.kdeplot(data=df[['carat', 'depth', 'table', 'x', 'y', 'z']])\n",
    "\n",
    "# Mostrar el gráfico\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAgQAAAGdCAYAAABtg2uAAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAYDUlEQVR4nO3de5BW9WH/8c8ulwVlWUUQRVChXvASSEQlRE0QbzGEGElbS23ES28TnEppOtF2KjF/VDvTScwM1pqa0TSNRWODJqRqiEYYUyy4hhZTTdEaxSwImgksyM3d5/fH97cgymUXdnmW5fWacZRnn33Odw/IeZ9zvuecmkqlUgkAcEirrfYAAIDqEwQAgCAAAAQBABBBAABEEAAAEQQAQAQBAJCkd3vf2NramqamptTX16empqYrxwQAdJJKpZLm5uYMGzYstbW7Pw7Q7iBoamrKiBEjOmVwAMCBtXLlygwfPny3X293ENTX12//wIEDB+7/yACALrd+/fqMGDFi+3Z8d9odBG2nCQYOHCgIAOAgs7fT/SYVAgCCAAAQBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEAEEEAAEQQAAARBABABAEA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GTRoUJVHcuhoaWnJ3Llzs3HjxkyYMKHawzkkzJgxI5MnT97p73i61ooVKzJs2LCMGjUqV199dV5//fWqjaXdDzdKkrfeeistLS0ZOnToTq8PHTo0L730UqcODLqL1tbWzJw5M+edd17OPPPMag+nx1u+fHkmTJiQzZs3Z8CAAZk3b15OP/30ag+rx5s7d26ef/75LF26tNpDOWSMHz8+999/f0499dSsWrUqt912Wy644IK88MILqa+vP+Dj6VAQwKFoxowZeeGFF6p7bu8Qcuqpp2bZsmVZt25dHn744UyfPj0LFy4UBV1o5cqVuemmm7JgwYL069ev2sM5ZFx++eXb/3vMmDEZP358TjjhhDz00EO54YYbDvh4OhQEgwcPTq9evfLmm2/u9Pqbb76ZY445plMHBt3BjTfemPnz52fRokXbH/9N1+rbt29OOumkJMm4ceOydOnSfP3rX88999xT5ZH1XI2NjVmzZk3OOuus7a+1tLRk0aJFmTNnTrZs2ZJevXpVcYSHhiOOOCKnnHJKXn755aosv0NzCPr27Ztx48blySef3P5aa2trnnzySef46FEqlUpuvPHGzJs3L0899VRGjhxZ7SEdslpbW7Nly5ZqD6NHu+iii7J8+fIsW7Zs+z9nn312rr766ixbtkwMHCAbNmzIK6+8kmOPPbYqy+/wKYNZs2Zl+vTpOfvss3PuuefmzjvvzMaNG3Pdddd1xfhI+UPy3mJ89dVXs2zZsgwaNCjHH398FUfWc82YMSMPPPBAHn300dTX12f16tVJkoaGhvTv37/Ko+u5brnlllx++eU5/vjj09zcnAceeCBPP/10nnjiiWoPrUerr6//wPyYww8/PEcddZR5M13oi1/8YqZMmZITTjghTU1NmT17dnr16pVp06ZVZTwdDoKrrroqa9euza233prVq1fnwx/+cB5//PEPTDSk8zz33HO58MILt/961qxZSZLp06fn/vvvr9Koera77747STJx4sSdXr/vvvty7bXXHvgBHSLWrFmTa665JqtWrUpDQ0PGjBmTJ554Ipdcckm1hwad7o033si0adPy9ttvZ8iQITn//PPz7LPPZsiQIVUZj8cfAwCeZQAACAIAIIIAAIggAAAiCACACAIAIIIAAIggAAAiCACACAIAIIIAAIggAACS/D9kCbZ49FUW0QAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "def outliersVisualPuntos(columna) :\n",
    "    variable, counts = np.unique(df[columna], return_counts=True)\n",
    "    sizes = counts*0.10\n",
    "    colors = ['blue']*len(variable)\n",
    "    colors[-1] = 'red'\n",
    "    plt.axhline(1, color='k', linestyle='')\n",
    "    plt.scatter(variable, np.ones(len(variable)), s=sizes, color=colors)\n",
    "    plt.yticks([])\n",
    "    plt.show()\n",
    "\n",
    "outliersVisualPuntos('carat')\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        1.198168\n",
       "1        1.240361\n",
       "2        1.198168\n",
       "3        1.071587\n",
       "4        1.029394\n",
       "           ...   \n",
       "53935    0.164427\n",
       "53936    0.164427\n",
       "53937    0.206621\n",
       "53938    0.130927\n",
       "53939    0.101137\n",
       "Name: carat, Length: 53940, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Puntuación Z = (punto_datos - media) / desviación estándar\n",
    "# ayuda a comprender qué tan lejos está el punto de datos de la media. Y después de configurar un valor \n",
    "# de umbral, se pueden utilizar los valores de puntuación z de los puntos de datos para definir los valores atíp\n",
    "\n",
    "\n",
    "def puntuacionZdeUnaVariableInd(variable):\n",
    "    z = np.abs(stats.zscore(df[variable]))\n",
    "    return z\n",
    "\n",
    "zCarat = puntuacionZdeUnaVariableInd('carat')\n",
    "zCarat\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de valores atipicos en la columna carat : 439\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "439"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# para definir un valor de umbral atípico, se elige que generalmente es 3.0. \n",
    "def cantidadDeValoresAtipicosEnLaColumna(z,nombreColumna) :\n",
    "    threshold = 3 \n",
    "    a = np.where(z > threshold)\n",
    "    cantidad_elementos = len(a[0])\n",
    "    print(\"Cantidad de valores atipicos en la columna \"+nombreColumna+\" :\", cantidad_elementos)\n",
    "    return cantidad_elementos\n",
    "\n",
    "\n",
    "cantidadDeValoresAtipicosEnLaColumna(zCarat,'carat')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "carat tiene 439 valores atipicos\n",
      "depth tiene 685 valores atipicos\n",
      "table tiene 336 valores atipicos\n",
      "x tiene 35 valores atipicos\n",
      "y tiene 27 valores atipicos\n",
      "z tiene 55 valores atipicos\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>carat</th>\n",
       "      <th>cut</th>\n",
       "      <th>color</th>\n",
       "      <th>clarity</th>\n",
       "      <th>depth</th>\n",
       "      <th>table</th>\n",
       "      <th>price</th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>z</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.23</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>E</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.5</td>\n",
       "      <td>55.0</td>\n",
       "      <td>326</td>\n",
       "      <td>3.95</td>\n",
       "      <td>3.98</td>\n",
       "      <td>2.43</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.21</td>\n",
       "      <td>Premium</td>\n",
       "      <td>E</td>\n",
       "      <td>SI1</td>\n",
       "      <td>59.8</td>\n",
       "      <td>61.0</td>\n",
       "      <td>326</td>\n",
       "      <td>3.89</td>\n",
       "      <td>3.84</td>\n",
       "      <td>2.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.29</td>\n",
       "      <td>Premium</td>\n",
       "      <td>I</td>\n",
       "      <td>VS2</td>\n",
       "      <td>62.4</td>\n",
       "      <td>58.0</td>\n",
       "      <td>334</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4.23</td>\n",
       "      <td>2.63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.31</td>\n",
       "      <td>Good</td>\n",
       "      <td>J</td>\n",
       "      <td>SI2</td>\n",
       "      <td>63.3</td>\n",
       "      <td>58.0</td>\n",
       "      <td>335</td>\n",
       "      <td>4.34</td>\n",
       "      <td>4.35</td>\n",
       "      <td>2.75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0.24</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>J</td>\n",
       "      <td>VVS2</td>\n",
       "      <td>62.8</td>\n",
       "      <td>57.0</td>\n",
       "      <td>336</td>\n",
       "      <td>3.94</td>\n",
       "      <td>3.96</td>\n",
       "      <td>2.48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53935</th>\n",
       "      <td>0.72</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>60.8</td>\n",
       "      <td>57.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.75</td>\n",
       "      <td>5.76</td>\n",
       "      <td>3.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53936</th>\n",
       "      <td>0.72</td>\n",
       "      <td>Good</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>63.1</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.69</td>\n",
       "      <td>5.75</td>\n",
       "      <td>3.61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53937</th>\n",
       "      <td>0.70</td>\n",
       "      <td>Very Good</td>\n",
       "      <td>D</td>\n",
       "      <td>SI1</td>\n",
       "      <td>62.8</td>\n",
       "      <td>60.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.66</td>\n",
       "      <td>5.68</td>\n",
       "      <td>3.56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53938</th>\n",
       "      <td>0.86</td>\n",
       "      <td>Premium</td>\n",
       "      <td>H</td>\n",
       "      <td>SI2</td>\n",
       "      <td>61.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>6.15</td>\n",
       "      <td>6.12</td>\n",
       "      <td>3.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53939</th>\n",
       "      <td>0.75</td>\n",
       "      <td>Ideal</td>\n",
       "      <td>D</td>\n",
       "      <td>SI2</td>\n",
       "      <td>62.2</td>\n",
       "      <td>55.0</td>\n",
       "      <td>2757</td>\n",
       "      <td>5.83</td>\n",
       "      <td>5.87</td>\n",
       "      <td>3.64</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>52552 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       carat        cut color clarity  depth  table  price     x     y     z\n",
       "0       0.23      Ideal     E     SI2   61.5   55.0    326  3.95  3.98  2.43\n",
       "1       0.21    Premium     E     SI1   59.8   61.0    326  3.89  3.84  2.31\n",
       "3       0.29    Premium     I     VS2   62.4   58.0    334  4.20  4.23  2.63\n",
       "4       0.31       Good     J     SI2   63.3   58.0    335  4.34  4.35  2.75\n",
       "5       0.24  Very Good     J    VVS2   62.8   57.0    336  3.94  3.96  2.48\n",
       "...      ...        ...   ...     ...    ...    ...    ...   ...   ...   ...\n",
       "53935   0.72      Ideal     D     SI1   60.8   57.0   2757  5.75  5.76  3.50\n",
       "53936   0.72       Good     D     SI1   63.1   55.0   2757  5.69  5.75  3.61\n",
       "53937   0.70  Very Good     D     SI1   62.8   60.0   2757  5.66  5.68  3.56\n",
       "53938   0.86    Premium     H     SI2   61.0   58.0   2757  6.15  6.12  3.74\n",
       "53939   0.75      Ideal     D     SI2   62.2   55.0   2757  5.83  5.87  3.64\n",
       "\n",
       "[52552 rows x 10 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lista = ['carat', 'depth', 'table', 'x', 'y', 'z']\n",
    "def cantidadDeValoresAtipicosEnLaColumna2(nombreColumna,columnaAtipica) :\n",
    "    threshold = 3\n",
    "    z = puntuacionZdeUnaVariableInd(nombreColumna)\n",
    "    df[columnaAtipica]=np.where(z>threshold, True, False)\n",
    "    return df\n",
    "\n",
    "def contarNumeroDeValoresATipicosEnUnaColumna(nombreColumna,columnaAtipica) :\n",
    "    cantidad_true = (df[columnaAtipica] == True).sum()\n",
    "    print(f\"{nombreColumna} tiene {cantidad_true} valores atipicos\")\n",
    "\n",
    "for element in lista:\n",
    "    atipicoBooleanoColumna = f\"es Atipico({element})\"\n",
    "    cantidadDeValoresAtipicosEnLaColumna2(element,atipicoBooleanoColumna)\n",
    "    contarNumeroDeValoresATipicosEnUnaColumna(element,atipicoBooleanoColumna)   \n",
    "df\n",
    "\n",
    "df.replace(0, np.nan, inplace=True)\n",
    "mean = df['x'].mean() # imputando x con media\n",
    "\n",
    "for element in lista:\n",
    "    atipicoBooleanoColumna = f\"es Atipico({element})\"\n",
    "    df = df.drop(df[df[atipicoBooleanoColumna] == True].index)\n",
    "    df = df.drop(columns=[atipicoBooleanoColumna])\n",
    "\n",
    "df"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Eliminamos las filas con valores atipicos y ademas tambien las columnas con booleanos creados en el paso anterior"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veamos los valores atipicos de todas las variables independientes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cantidad de valores atipicos en la columna carat : 236\n",
      "Cantidad de valores atipicos en la columna depth : 413\n",
      "Cantidad de valores atipicos en la columna table : 230\n",
      "Cantidad de valores atipicos en la columna x : 0\n",
      "Cantidad de valores atipicos en la columna y : 0\n",
      "Cantidad de valores atipicos en la columna z : 0\n",
      "cantidad total de valores atipicos en el df : 879\n"
     ]
    }
   ],
   "source": [
    "lista = ['carat', 'depth', 'table', 'x', 'y', 'z']\n",
    "cantidadDeOutliders = 0\n",
    "for element in lista :\n",
    "    z= puntuacionZdeUnaVariableInd(element)\n",
    "    cantidadDeValoresAtipicos = cantidadDeValoresAtipicosEnLaColumna(z,element)\n",
    "    cantidadDeOutliders= cantidadDeOutliders + cantidadDeValoresAtipicos\n",
    "print(\"cantidad total de valores atipicos en el df :\" , cantidadDeOutliders)\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Veamos con cuantos registros cuenta nuestros dataframe (Aunque esto ya lo sabemos de antemano)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Número de filas: 52552\n"
     ]
    }
   ],
   "source": [
    "num_filas = df.shape[0]\n",
    "print(\"Número de filas:\", num_filas)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "ahora veamos la cantidad de variables independientes que consideramos para hacer el analisis de datos outliders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(lista)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cuantos datos hay en total teniendo en cuenta solo la lista ['carat', 'depth', 'table', 'x', 'y', 'z'] "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "315312"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "numeroDeDatos = num_filas*len(lista)\n",
    "numeroDeDatos"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Ahora de esos datos que porcentaje son outliders"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "el porcentaje de outilders es del  0.27877150251179783 %\n"
     ]
    }
   ],
   "source": [
    "porcentajeDeOutliders=  (cantidadDeOutliders*100)/numeroDeDatos\n",
    "print(\"el porcentaje de outilders es del \",porcentajeDeOutliders,\"%\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El porcentaje de datos outliers en las columnas ['carat', 'depth', 'table', 'x', 'y', 'z'] es solo del 0.49%. A pesar de ser considerados anomalías, estos valores atípicos representan  alciertas gunas características  de algunos diamantes que influyen en su precio. Por lo tanto, en este TP se ha decidido  mantenerlos para preservar la integridad de los datos. Se reconoce  que estas anomalías son relevantes en la industria de los diamantes y pueden proporcionar información valiosa sobre las variaciones en los precios de cada diamante"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Análisis Bivariado/Multivariado"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Consiste en comparar pares de variables para intentar encontrar algún tipo de\n",
    "relación . esta información\n",
    "es crítica a la hora de identificar cuáles pueden ser los mejores predictores para el modelo, qué variables presentan relaciones de tipo no\n",
    "lineal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#gráfico de pares: es una matriz de diagramas de dispersión que permite comprender la relación por pares \n",
    "# entre diferentes variables en un conjunto de datos.\n",
    "\n",
    "\n",
    "\n",
    "##pairplot = sns.pairplot(df)\n",
    "\n",
    "#Mostrar el gráfico\n",
    "##pairplot.fig.show()\n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Si en el gráfico de dispersión generado por sns.pairplot(df), se puede ver  una relación lineal entre las variables \"x\" y \"y\" con respecto a la variable \"price\", esto podria  significa que existe una asociación lineal entre esas variables. En otras palabras, a medida que los valores de \"x\" aumentan, los valores de \"y\" también tienden a aumentar o disminuir de manera lineal, y esto a su vez tiene un impacto en los valores de \"price\".\n",
    "\n",
    "Este tipo de relación lineal entre \"x\", \"y\" y \"price\" puede ser útil en el análisis de datos, ya que indica que \"x\" y \"y\" pueden ser buenos predictores de \"price\" en un modelo de regresión lineal. Esto significa que se puede utilizar una ecuación lineal para predecir los valores de \"price\" en función de los valores de \"x\" y \"y\".\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "##pairplotCUT = sns.pairplot(df, hue='cut')\n",
    "\n",
    "#Mostrar el gráfico\n",
    "##pairplotCUT.fig.show()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Matriz de correlación\n",
    "\n",
    "Muestra el grado de correlaciones, de cada variable en el conjunto de datos, con cada otra variable en el conjunto de datos. Es una representación de todos estos coeficientes de correlación de cada variable individual en los datos con cada otra variable en los datos.\n",
    "\n",
    "El grado de correlación entre dos variables cualesquiera se representa de dos maneras, el color del cuadro o caja y el número dentro. Cuanto más fuerte sea el color, mayor será la magnitud de la correlación.\n",
    "\n",
    "Cuanto más cerca esté el número de 1, mayor será la correlación. Si el número es positivo, establece una correlación positiva. Si es negativo establece una correlación negativa. \n",
    "\n",
    "1 y -1 establecen correlaciones perfectas entre las variables."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: >"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1200x800 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = df.corr()\n",
    "plt.subplots(figsize=(12,8))\n",
    "sns.heatmap(corr, xticklabels=corr.columns, yticklabels=corr.columns, annot=True, fmt='.0%',\n",
    "            cmap=sns.diverging_palette(240, 10, as_cmap=True)) \n"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "table y depth tienen una correlacion baja con price. Procedemos a eliminarlos ya que  la capacidad predictiva es limitada."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('dfMod.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
